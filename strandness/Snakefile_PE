import os

transcriptome="PATH_TO_YOUR_FILE/nostoc_azollae_0708_gca_000196515.ASM19651v1.cdna.all.fa"
path_to_reads="PATH_TO_YOUR_FILE/strandness/" # the path to the FOLDER of the reads
reads,=glob_wildcards(os.path.join(path_to_reads, "{sample}_1.fq.gz"))
output_dir="PATH_TO_YOUR_FILE/strandness/results" # The files will be here
################################################################################################################

rule all:
	input:
		expand(os.path.join(output_dir, "{read}_test.libtype"), read=reads)

rule determining_library_type:
	input:
		os.path.join(output_dir,"{read}_test.libtypetesting")
	output:
		os.path.join(output_dir, "{read}_test.libtype")
	shell:
		"""
		less {input} | awk '{{print $2/$1,$3/$1,$3/$2}}' | awk '{{if($1<0.3 && $3>3)print "stranded";else if($1>3 && $2>3)print "reverse";else print "unstranded"}}' > {output}
		"""

rule comparing_quantification_methods:
	input:
		order_fr=os.path.join(output_dir, "order", "{read}_fr_done.txt"),
		order_rf=os.path.join(output_dir, "order", "{read}_rf_done.txt"),
		order_un=os.path.join(output_dir, "order", "{read}_un_done.txt")
	output:
		library_type=os.path.join(output_dir, "{read}_test.libtypetesting")
	params:
		abundance_fr=os.path.join(output_dir,"{read}_test.fr","abundance.tsv"),
		abundance_rf=os.path.join(output_dir,"{read}_test.rf","abundance.tsv"),
		abundance_un=os.path.join(output_dir,"{read}_test.un","abundance.tsv")
	shell:
		"""
		paste {params.abundance_fr} {params.abundance_rf} {params.abundance_un} | cut -f1,4,9,14  | awk 'BEGIN{{sum1=0;sum2=0;sun3=0}}{{sum1+=$2;sum2+=$3;sum3+=$4}}END{{print sum1,sum2,sum3}}' > {output}
		"""

rule kallisto_quantificatoin_fr:
	input:
		index=os.path.join(output_dir, "transcriptome_index.idx"),
		r1=os.path.join(output_dir, "sampled", "{read}_1.fq.gz"),
		r2=os.path.join(output_dir, "sampled", "{read}_2.fq.gz")
	output:
		folder=directory(os.path.join(output_dir, "{read}_test.fr")),
		order=temp(touch(os.path.join(output_dir, "order", "{read}_fr_done.txt")))
	log: os.path.join(output_dir, "logs/{read}_fr_quant.log")
	conda:
		"envs/kallisto.yaml"
	shell:
		"kallisto quant -i {input.index} -o {output.folder} {input.r1} {input.r2} --fr-stranded"

rule kallisto_quantificatoin_rf:
	input:
		index=os.path.join(output_dir, "transcriptome_index.idx"),
		r1=os.path.join(output_dir, "sampled", "{read}_1.fq.gz"),
		r2=os.path.join(output_dir, "sampled", "{read}_2.fq.gz")
	output:
		folder=directory(os.path.join(output_dir, "{read}_test.rf")),
		order=temp(touch(os.path.join(output_dir,"order","{read}_rf_done.txt")))
	log: os.path.join(output_dir, "logs/{read}_rf_quant.log")
	conda:
		"envs/kallisto.yaml"
	shell:
		"kallisto quant -i {input.index} -o {output.folder} {input.r1} {input.r2} --rf-stranded"

rule kallisto_quantificatoin_unstranded:
	input:
		index=os.path.join(output_dir, "transcriptome_index.idx"),
		r1=os.path.join(output_dir, "sampled", "{read}_1.fq.gz"),
		r2=os.path.join(output_dir, "sampled", "{read}_2.fq.gz")
	output:
		folder=directory(os.path.join(output_dir, "{read}_test.un")),
		order=temp(touch(os.path.join(output_dir,"order","{read}_un_done.txt")))
	log: os.path.join(output_dir, "logs/{read}_un_quant.log")
	conda:
		"envs/kallisto.yaml"
	shell:
		"kallisto quant -i {input.index} -o {output.folder} {input.r1} {input.r2}"

rule kallisto_index_transcriptome:
	output:
		index_filename=os.path.join(output_dir, "transcriptome_index.idx")
	conda:
		"envs/kallisto.yaml"
	log: os.path.join(output_dir, "logs/kallisto_index_transcriptome.log")
	shell:
		"kallisto index -i {output.index_filename} {transcriptome}"

rule sampling_reads_2:
    input:
        os.path.join(path_to_reads, "{read}_2.fq.gz")
    output:
        os.path.join(output_dir, "sampled", "{read}_2.fq.gz")
    conda:
        "envs/seqtk.yaml"
    log: os.path.join(output_dir, "logs/sampling_reads_{read}_2.log")
    params:
        number_of_sample=1000000
    shell:
        "seqtk sample -s100 {input} {params.number_of_sample} > {output}"

rule sampling_reads_1:
	input:
		os.path.join(path_to_reads, "{read}_1.fq.gz")
	output:
		os.path.join(output_dir, "sampled", "{read}_1.fq.gz")
	conda:
		"envs/seqtk.yaml"
	log: os.path.join(output_dir, "logs/sampling_reads_{read}_1.log")
	params:
		number_of_sample=1000000
	shell:
		"seqtk sample -s100 {input} {params.number_of_sample} > {output}"
